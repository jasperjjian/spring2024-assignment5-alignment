INFO 06-06 00:00:53 llm_engine.py:161] Initializing an LLM engine (v0.4.3) with config: model='/data/Meta-Llama-3-8B', speculative_config=None, tokenizer='/data/Meta-Llama-3-8B', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, rope_scaling=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=/data/Meta-Llama-3-8B)
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
INFO 06-06 00:00:57 model_runner.py:146] Loading model weights took 14.9595 GB
INFO 06-06 00:00:58 gpu_executor.py:83] # GPU blocks: 27891, # CPU blocks: 2048
INFO 06-06 00:00:59 model_runner.py:854] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-06 00:00:59 model_runner.py:858] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-06 00:01:01 model_runner.py:924] Graph capturing finished in 2 secs.
Processed prompts:   0%|          | 0/100 [00:00<?, ?it/s, Generation Speed: 0.00 toks/s]Processed prompts:   1%|          | 1/100 [00:00<01:16,  1.30it/s, Generation Speed: 27.29 toks/s]Processed prompts:   3%|▎         | 3/100 [00:00<00:23,  4.08it/s, Generation Speed: 81.77 toks/s]Processed prompts:   6%|▌         | 6/100 [00:01<00:10,  8.56it/s, Generation Speed: 171.92 toks/s]Processed prompts:   9%|▉         | 9/100 [00:01<00:07, 12.69it/s, Generation Speed: 261.99 toks/s]Processed prompts:  16%|█▌        | 16/100 [00:01<00:03, 24.92it/s, Generation Speed: 509.95 toks/s]Processed prompts:  21%|██        | 21/100 [00:01<00:02, 29.63it/s, Generation Speed: 669.29 toks/s]Processed prompts:  29%|██▉       | 29/100 [00:01<00:01, 41.87it/s, Generation Speed: 971.91 toks/s]Processed prompts:  38%|███▊      | 38/100 [00:01<00:01, 53.24it/s, Generation Speed: 1310.91 toks/s]Processed prompts:  50%|█████     | 50/100 [00:01<00:00, 69.20it/s, Generation Speed: 1781.32 toks/s]Processed prompts:  58%|█████▊    | 58/100 [00:01<00:00, 63.34it/s, Generation Speed: 2033.64 toks/s]Processed prompts:  67%|██████▋   | 67/100 [00:01<00:00, 69.86it/s, Generation Speed: 2400.00 toks/s]Processed prompts:  75%|███████▌  | 75/100 [00:02<00:00, 54.39it/s, Generation Speed: 2574.17 toks/s]Processed prompts:  82%|████████▏ | 82/100 [00:02<00:00, 35.01it/s, Generation Speed: 2569.48 toks/s]Processed prompts:  87%|████████▋ | 87/100 [00:03<00:00, 14.72it/s, Generation Speed: 2104.05 toks/s]Processed prompts:  91%|█████████ | 91/100 [00:10<00:03,  2.50it/s, Generation Speed: 931.51 toks/s] Processed prompts: 100%|██████████| 100/100 [00:10<00:00,  9.42it/s, Generation Speed: 1799.44 toks/s]
2024-06-06 00:01:15,426 - evaluate_safety - INFO - running scripts/evaluate_safety.py --input-path /home/c-jjian/assignments/spring2024-assignment5-alignment/results/simple_safety_tests/llama_3_8b_results.jsonl --model-name-or-path /home/shared/Meta-Llama-3-70B-Instruct --num-gpus 2 --output-path /home/c-jjian/assignments/spring2024-assignment5-alignment/results/simple_safety_tests/llama_3_8b.annotated.jsonl
2024-06-06 00:01:17,409	INFO worker.py:1749 -- Started a local Ray instance.
INFO 06-06 00:01:31 llm_engine.py:161] Initializing an LLM engine (v0.4.3) with config: model='/home/shared/Meta-Llama-3-70B-Instruct', speculative_config=None, tokenizer='/home/shared/Meta-Llama-3-70B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, rope_scaling=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=6144, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=/home/shared/Meta-Llama-3-70B-Instruct)
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
INFO 06-06 00:01:36 utils.py:618] Found nccl from library libnccl.so.2
INFO 06-06 00:01:36 pynccl.py:65] vLLM is using nccl==2.20.5
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:01:36 utils.py:618] Found nccl from library libnccl.so.2
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:01:36 pynccl.py:65] vLLM is using nccl==2.20.5
INFO 06-06 00:01:37 custom_all_reduce_utils.py:179] reading GPU P2P access cache from /home/c-jjian/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:01:37 custom_all_reduce_utils.py:179] reading GPU P2P access cache from /home/c-jjian/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-06 00:01:57 model_runner.py:146] Loading model weights took 65.7114 GB
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:02:03 model_runner.py:146] Loading model weights took 65.7114 GB
INFO 06-06 00:02:05 distributed_gpu_executor.py:56] # GPU blocks: 705, # CPU blocks: 1638
INFO 06-06 00:02:07 model_runner.py:854] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-06 00:02:07 model_runner.py:858] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:02:07 model_runner.py:854] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:02:07 model_runner.py:858] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-06 00:02:11 custom_all_reduce.py:260] Registering 5635 cuda graph addresses
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:02:11 custom_all_reduce.py:260] Registering 5635 cuda graph addresses
INFO 06-06 00:02:11 model_runner.py:924] Graph capturing finished in 4 secs.
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
2024-06-06 00:02:12,080 - evaluate_safety - INFO - Read 100 model responses from /home/c-jjian/assignments/spring2024-assignment5-alignment/results/simple_safety_tests/llama_3_8b_results.jsonl
[36m(RayWorkerWrapper pid=3179467)[0m INFO 06-06 00:02:11 model_runner.py:924] Graph capturing finished in 4 secs.
Processed prompts:   0%|          | 0/100 [00:00<?, ?it/s, Generation Speed: 0.00 toks/s]Processed prompts:   1%|          | 1/100 [00:01<02:22,  1.43s/it, Generation Speed: 1.39 toks/s]Processed prompts:  29%|██▉       | 29/100 [00:02<00:05, 12.08it/s, Generation Speed: 20.66 toks/s]Processed prompts:  75%|███████▌  | 75/100 [00:03<00:01, 23.98it/s, Generation Speed: 38.46 toks/s]Processed prompts: 100%|██████████| 100/100 [00:03<00:00, 25.63it/s, Generation Speed: 51.26 toks/s]
2024-06-06 00:02:16,092 - evaluate_safety - INFO - Processed 100 prompts
0it [00:00, ?it/s]100it [00:00, 80613.18it/s]
2024-06-06 00:02:16,106 - evaluate_safety - INFO - safe: 0.66
2024-06-06 00:02:16,108 - evaluate_safety - INFO - finished running scripts/evaluate_safety.py
[rank0]:[W CudaIPCTypes.cpp:16] Producer process has been terminated before all shared CUDA tensors released. See Note [Sharing CUDA tensors]
